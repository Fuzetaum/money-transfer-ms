/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.ricardofuzeto.database.tables.daos;


import com.revolut.test.backend.ricardofuzeto.database.tables.PendingWithdraw;
import com.revolut.test.backend.ricardofuzeto.database.tables.records.PendingWithdrawRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PendingWithdrawDao extends DAOImpl<PendingWithdrawRecord, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingWithdraw, String> {

    /**
     * Create a new PendingWithdrawDao without any configuration
     */
    public PendingWithdrawDao() {
        super(PendingWithdraw.PENDING_WITHDRAW, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingWithdraw.class);
    }

    /**
     * Create a new PendingWithdrawDao with an attached configuration
     */
    public PendingWithdrawDao(Configuration configuration) {
        super(PendingWithdraw.PENDING_WITHDRAW, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingWithdraw.class, configuration);
    }

    @Override
    public String getId(com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingWithdraw object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingWithdraw> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(PendingWithdraw.PENDING_WITHDRAW.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingWithdraw> fetchById(String... values) {
        return fetch(PendingWithdraw.PENDING_WITHDRAW.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingWithdraw fetchOneById(String value) {
        return fetchOne(PendingWithdraw.PENDING_WITHDRAW.ID, value);
    }
}
