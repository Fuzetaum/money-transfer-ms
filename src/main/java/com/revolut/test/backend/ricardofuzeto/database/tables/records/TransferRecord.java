/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.ricardofuzeto.database.tables.records;


import com.revolut.test.backend.ricardofuzeto.database.tables.Transfer;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferRecord extends UpdatableRecordImpl<TransferRecord> implements Record7<String, String, String, UInteger, String, String, Integer> {

    private static final long serialVersionUID = 646586771;

    /**
     * Setter for <code>transfer.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>transfer.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>transfer.sender</code>.
     */
    public void setSender(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>transfer.sender</code>.
     */
    public String getSender() {
        return (String) get(1);
    }

    /**
     * Setter for <code>transfer.receiver</code>.
     */
    public void setReceiver(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>transfer.receiver</code>.
     */
    public String getReceiver() {
        return (String) get(2);
    }

    /**
     * Setter for <code>transfer.amount</code>.
     */
    public void setAmount(UInteger value) {
        set(3, value);
    }

    /**
     * Getter for <code>transfer.amount</code>.
     */
    public UInteger getAmount() {
        return (UInteger) get(3);
    }

    /**
     * Setter for <code>transfer.sender_currency</code>.
     */
    public void setSenderCurrency(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>transfer.sender_currency</code>.
     */
    public String getSenderCurrency() {
        return (String) get(4);
    }

    /**
     * Setter for <code>transfer.receiver_currency</code>.
     */
    public void setReceiverCurrency(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>transfer.receiver_currency</code>.
     */
    public String getReceiverCurrency() {
        return (String) get(5);
    }

    /**
     * Setter for <code>transfer.retriesLeft</code>.
     */
    public void setRetriesleft(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>transfer.retriesLeft</code>.
     */
    public Integer getRetriesleft() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, UInteger, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, String, String, UInteger, String, String, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Transfer.TRANSFER.ID;
    }

    @Override
    public Field<String> field2() {
        return Transfer.TRANSFER.SENDER;
    }

    @Override
    public Field<String> field3() {
        return Transfer.TRANSFER.RECEIVER;
    }

    @Override
    public Field<UInteger> field4() {
        return Transfer.TRANSFER.AMOUNT;
    }

    @Override
    public Field<String> field5() {
        return Transfer.TRANSFER.SENDER_CURRENCY;
    }

    @Override
    public Field<String> field6() {
        return Transfer.TRANSFER.RECEIVER_CURRENCY;
    }

    @Override
    public Field<Integer> field7() {
        return Transfer.TRANSFER.RETRIESLEFT;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getSender();
    }

    @Override
    public String component3() {
        return getReceiver();
    }

    @Override
    public UInteger component4() {
        return getAmount();
    }

    @Override
    public String component5() {
        return getSenderCurrency();
    }

    @Override
    public String component6() {
        return getReceiverCurrency();
    }

    @Override
    public Integer component7() {
        return getRetriesleft();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getSender();
    }

    @Override
    public String value3() {
        return getReceiver();
    }

    @Override
    public UInteger value4() {
        return getAmount();
    }

    @Override
    public String value5() {
        return getSenderCurrency();
    }

    @Override
    public String value6() {
        return getReceiverCurrency();
    }

    @Override
    public Integer value7() {
        return getRetriesleft();
    }

    @Override
    public TransferRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public TransferRecord value2(String value) {
        setSender(value);
        return this;
    }

    @Override
    public TransferRecord value3(String value) {
        setReceiver(value);
        return this;
    }

    @Override
    public TransferRecord value4(UInteger value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransferRecord value5(String value) {
        setSenderCurrency(value);
        return this;
    }

    @Override
    public TransferRecord value6(String value) {
        setReceiverCurrency(value);
        return this;
    }

    @Override
    public TransferRecord value7(Integer value) {
        setRetriesleft(value);
        return this;
    }

    @Override
    public TransferRecord values(String value1, String value2, String value3, UInteger value4, String value5, String value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransferRecord
     */
    public TransferRecord() {
        super(Transfer.TRANSFER);
    }

    /**
     * Create a detached, initialised TransferRecord
     */
    public TransferRecord(String id, String sender, String receiver, UInteger amount, String senderCurrency, String receiverCurrency, Integer retriesleft) {
        super(Transfer.TRANSFER);

        set(0, id);
        set(1, sender);
        set(2, receiver);
        set(3, amount);
        set(4, senderCurrency);
        set(5, receiverCurrency);
        set(6, retriesleft);
    }
}
