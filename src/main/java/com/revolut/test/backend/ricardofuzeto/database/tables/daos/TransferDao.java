/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.ricardofuzeto.database.tables.daos;


import com.revolut.test.backend.ricardofuzeto.database.tables.Transfer;
import com.revolut.test.backend.ricardofuzeto.database.tables.records.TransferRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferDao extends DAOImpl<TransferRecord, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer, String> {

    /**
     * Create a new TransferDao without any configuration
     */
    public TransferDao() {
        super(Transfer.TRANSFER, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer.class);
    }

    /**
     * Create a new TransferDao with an attached configuration
     */
    public TransferDao(Configuration configuration) {
        super(Transfer.TRANSFER, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer.class, configuration);
    }

    @Override
    public String getId(com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchById(String... values) {
        return fetch(Transfer.TRANSFER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer fetchOneById(String value) {
        return fetchOne(Transfer.TRANSFER.ID, value);
    }

    /**
     * Fetch records that have <code>sender BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchRangeOfSender(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.SENDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sender IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchBySender(String... values) {
        return fetch(Transfer.TRANSFER.SENDER, values);
    }

    /**
     * Fetch records that have <code>receiver BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchRangeOfReceiver(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.RECEIVER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>receiver IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchByReceiver(String... values) {
        return fetch(Transfer.TRANSFER.RECEIVER, values);
    }

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchRangeOfAmount(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(Transfer.TRANSFER.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchByAmount(UInteger... values) {
        return fetch(Transfer.TRANSFER.AMOUNT, values);
    }

    /**
     * Fetch records that have <code>sender_currency BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchRangeOfSenderCurrency(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.SENDER_CURRENCY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sender_currency IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchBySenderCurrency(String... values) {
        return fetch(Transfer.TRANSFER.SENDER_CURRENCY, values);
    }

    /**
     * Fetch records that have <code>receiver_currency BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchRangeOfReceiverCurrency(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.RECEIVER_CURRENCY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>receiver_currency IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchByReceiverCurrency(String... values) {
        return fetch(Transfer.TRANSFER.RECEIVER_CURRENCY, values);
    }

    /**
     * Fetch records that have <code>retriesLeft BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchRangeOfRetriesleft(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Transfer.TRANSFER.RETRIESLEFT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>retriesLeft IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.Transfer> fetchByRetriesleft(Integer... values) {
        return fetch(Transfer.TRANSFER.RETRIESLEFT, values);
    }
}
