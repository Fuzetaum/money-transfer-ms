/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.ricardofuzeto.database.tables.daos;


import com.revolut.test.backend.ricardofuzeto.database.tables.PendingDeposit;
import com.revolut.test.backend.ricardofuzeto.database.tables.records.PendingDepositRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PendingDepositDao extends DAOImpl<PendingDepositRecord, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingDeposit, String> {

    /**
     * Create a new PendingDepositDao without any configuration
     */
    public PendingDepositDao() {
        super(PendingDeposit.PENDING_DEPOSIT, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingDeposit.class);
    }

    /**
     * Create a new PendingDepositDao with an attached configuration
     */
    public PendingDepositDao(Configuration configuration) {
        super(PendingDeposit.PENDING_DEPOSIT, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingDeposit.class, configuration);
    }

    @Override
    public String getId(com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingDeposit object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingDeposit> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(PendingDeposit.PENDING_DEPOSIT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingDeposit> fetchById(String... values) {
        return fetch(PendingDeposit.PENDING_DEPOSIT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.revolut.test.backend.ricardofuzeto.database.tables.pojos.PendingDeposit fetchOneById(String value) {
        return fetchOne(PendingDeposit.PENDING_DEPOSIT.ID, value);
    }
}
