/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.ricardofuzeto.database.tables.daos;


import com.revolut.test.backend.ricardofuzeto.database.tables.TransferAttempt;
import com.revolut.test.backend.ricardofuzeto.database.tables.records.TransferAttemptRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferAttemptDao extends DAOImpl<TransferAttemptRecord, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt, Integer> {

    /**
     * Create a new TransferAttemptDao without any configuration
     */
    public TransferAttemptDao() {
        super(TransferAttempt.TRANSFER_ATTEMPT, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt.class);
    }

    /**
     * Create a new TransferAttemptDao with an attached configuration
     */
    public TransferAttemptDao(Configuration configuration) {
        super(TransferAttempt.TRANSFER_ATTEMPT, com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt.class, configuration);
    }

    @Override
    public Integer getId(com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TransferAttempt.TRANSFER_ATTEMPT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt> fetchById(Integer... values) {
        return fetch(TransferAttempt.TRANSFER_ATTEMPT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt fetchOneById(Integer value) {
        return fetchOne(TransferAttempt.TRANSFER_ATTEMPT.ID, value);
    }

    /**
     * Fetch records that have <code>transfer_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt> fetchRangeOfTransferId(String lowerInclusive, String upperInclusive) {
        return fetchRange(TransferAttempt.TRANSFER_ATTEMPT.TRANSFER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>transfer_id IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt> fetchByTransferId(String... values) {
        return fetch(TransferAttempt.TRANSFER_ATTEMPT.TRANSFER_ID, values);
    }

    /**
     * Fetch records that have <code>date_of_transfer BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt> fetchRangeOfDateOfTransfer(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(TransferAttempt.TRANSFER_ATTEMPT.DATE_OF_TRANSFER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date_of_transfer IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt> fetchByDateOfTransfer(Timestamp... values) {
        return fetch(TransferAttempt.TRANSFER_ATTEMPT.DATE_OF_TRANSFER, values);
    }

    /**
     * Fetch records that have <code>result BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt> fetchRangeOfResult(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(TransferAttempt.TRANSFER_ATTEMPT.RESULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>result IN (values)</code>
     */
    public List<com.revolut.test.backend.ricardofuzeto.database.tables.pojos.TransferAttempt> fetchByResult(UInteger... values) {
        return fetch(TransferAttempt.TRANSFER_ATTEMPT.RESULT, values);
    }
}
