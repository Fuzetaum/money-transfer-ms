/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.ricardofuzeto.database.tables;


import com.revolut.test.backend.ricardofuzeto.database.DefaultSchema;
import com.revolut.test.backend.ricardofuzeto.database.Indexes;
import com.revolut.test.backend.ricardofuzeto.database.Keys;
import com.revolut.test.backend.ricardofuzeto.database.tables.records.TransferAttemptRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferAttempt extends TableImpl<TransferAttemptRecord> {

    private static final long serialVersionUID = 1972182340;

    /**
     * The reference instance of <code>transfer_attempt</code>
     */
    public static final TransferAttempt TRANSFER_ATTEMPT = new TransferAttempt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferAttemptRecord> getRecordType() {
        return TransferAttemptRecord.class;
    }

    /**
     * The column <code>transfer_attempt.id</code>.
     */
    public final TableField<TransferAttemptRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>transfer_attempt.transfer_id</code>.
     */
    public final TableField<TransferAttemptRecord, String> TRANSFER_ID = createField(DSL.name("transfer_id"), org.jooq.impl.SQLDataType.CHAR(36), this, "");

    /**
     * The column <code>transfer_attempt.date_of_transfer</code>.
     */
    public final TableField<TransferAttemptRecord, Timestamp> DATE_OF_TRANSFER = createField(DSL.name("date_of_transfer"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>transfer_attempt.result</code>.
     */
    public final TableField<TransferAttemptRecord, UInteger> RESULT = createField(DSL.name("result"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>transfer_attempt</code> table reference
     */
    public TransferAttempt() {
        this(DSL.name("transfer_attempt"), null);
    }

    /**
     * Create an aliased <code>transfer_attempt</code> table reference
     */
    public TransferAttempt(String alias) {
        this(DSL.name(alias), TRANSFER_ATTEMPT);
    }

    /**
     * Create an aliased <code>transfer_attempt</code> table reference
     */
    public TransferAttempt(Name alias) {
        this(alias, TRANSFER_ATTEMPT);
    }

    private TransferAttempt(Name alias, Table<TransferAttemptRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransferAttempt(Name alias, Table<TransferAttemptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TransferAttempt(Table<O> child, ForeignKey<O, TransferAttemptRecord> key) {
        super(child, key, TRANSFER_ATTEMPT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSFER_ATTEMPT_PRIMARY, Indexes.TRANSFER_ATTEMPT_TRANSFER_ID);
    }

    @Override
    public Identity<TransferAttemptRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRANSFER_ATTEMPT;
    }

    @Override
    public UniqueKey<TransferAttemptRecord> getPrimaryKey() {
        return Keys.KEY_TRANSFER_ATTEMPT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TransferAttemptRecord>> getKeys() {
        return Arrays.<UniqueKey<TransferAttemptRecord>>asList(Keys.KEY_TRANSFER_ATTEMPT_PRIMARY);
    }

    @Override
    public List<ForeignKey<TransferAttemptRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransferAttemptRecord, ?>>asList(Keys.TRANSFER_ATTEMPT_IBFK_1);
    }

    public Transfer transfer() {
        return new Transfer(this, Keys.TRANSFER_ATTEMPT_IBFK_1);
    }

    @Override
    public TransferAttempt as(String alias) {
        return new TransferAttempt(DSL.name(alias), this);
    }

    @Override
    public TransferAttempt as(Name alias) {
        return new TransferAttempt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferAttempt rename(String name) {
        return new TransferAttempt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferAttempt rename(Name name) {
        return new TransferAttempt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Timestamp, UInteger> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
