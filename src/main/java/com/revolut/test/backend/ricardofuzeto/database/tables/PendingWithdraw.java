/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.ricardofuzeto.database.tables;


import com.revolut.test.backend.ricardofuzeto.database.DefaultSchema;
import com.revolut.test.backend.ricardofuzeto.database.Indexes;
import com.revolut.test.backend.ricardofuzeto.database.Keys;
import com.revolut.test.backend.ricardofuzeto.database.tables.records.PendingWithdrawRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PendingWithdraw extends TableImpl<PendingWithdrawRecord> {

    private static final long serialVersionUID = -305768960;

    /**
     * The reference instance of <code>pending_withdraw</code>
     */
    public static final PendingWithdraw PENDING_WITHDRAW = new PendingWithdraw();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PendingWithdrawRecord> getRecordType() {
        return PendingWithdrawRecord.class;
    }

    /**
     * The column <code>pending_withdraw.id</code>.
     */
    public final TableField<PendingWithdrawRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * Create a <code>pending_withdraw</code> table reference
     */
    public PendingWithdraw() {
        this(DSL.name("pending_withdraw"), null);
    }

    /**
     * Create an aliased <code>pending_withdraw</code> table reference
     */
    public PendingWithdraw(String alias) {
        this(DSL.name(alias), PENDING_WITHDRAW);
    }

    /**
     * Create an aliased <code>pending_withdraw</code> table reference
     */
    public PendingWithdraw(Name alias) {
        this(alias, PENDING_WITHDRAW);
    }

    private PendingWithdraw(Name alias, Table<PendingWithdrawRecord> aliased) {
        this(alias, aliased, null);
    }

    private PendingWithdraw(Name alias, Table<PendingWithdrawRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PendingWithdraw(Table<O> child, ForeignKey<O, PendingWithdrawRecord> key) {
        super(child, key, PENDING_WITHDRAW);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PENDING_WITHDRAW_PRIMARY);
    }

    @Override
    public UniqueKey<PendingWithdrawRecord> getPrimaryKey() {
        return Keys.KEY_PENDING_WITHDRAW_PRIMARY;
    }

    @Override
    public List<UniqueKey<PendingWithdrawRecord>> getKeys() {
        return Arrays.<UniqueKey<PendingWithdrawRecord>>asList(Keys.KEY_PENDING_WITHDRAW_PRIMARY);
    }

    @Override
    public List<ForeignKey<PendingWithdrawRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PendingWithdrawRecord, ?>>asList(Keys.PENDING_WITHDRAW_IBFK_1);
    }

    public Transfer transfer() {
        return new Transfer(this, Keys.PENDING_WITHDRAW_IBFK_1);
    }

    @Override
    public PendingWithdraw as(String alias) {
        return new PendingWithdraw(DSL.name(alias), this);
    }

    @Override
    public PendingWithdraw as(Name alias) {
        return new PendingWithdraw(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PendingWithdraw rename(String name) {
        return new PendingWithdraw(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PendingWithdraw rename(Name name) {
        return new PendingWithdraw(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
