/*
 * This file is generated by jOOQ.
 */
package com.revolut.test.backend.ricardofuzeto.database.tables;


import com.revolut.test.backend.ricardofuzeto.database.DefaultSchema;
import com.revolut.test.backend.ricardofuzeto.database.Indexes;
import com.revolut.test.backend.ricardofuzeto.database.Keys;
import com.revolut.test.backend.ricardofuzeto.database.tables.records.TransferRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transfer extends TableImpl<TransferRecord> {

    private static final long serialVersionUID = 363352422;

    /**
     * The reference instance of <code>transfer</code>
     */
    public static final Transfer TRANSFER = new Transfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferRecord> getRecordType() {
        return TransferRecord.class;
    }

    /**
     * The column <code>transfer.id</code>.
     */
    public final TableField<TransferRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>transfer.sender</code>.
     */
    public final TableField<TransferRecord, String> SENDER = createField(DSL.name("sender"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>transfer.receiver</code>.
     */
    public final TableField<TransferRecord, String> RECEIVER = createField(DSL.name("receiver"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>transfer.amount</code>.
     */
    public final TableField<TransferRecord, UInteger> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>transfer.sender_currency</code>.
     */
    public final TableField<TransferRecord, String> SENDER_CURRENCY = createField(DSL.name("sender_currency"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>transfer.receiver_currency</code>.
     */
    public final TableField<TransferRecord, String> RECEIVER_CURRENCY = createField(DSL.name("receiver_currency"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>transfer.retries_left</code>.
     */
    public final TableField<TransferRecord, Integer> RETRIES_LEFT = createField(DSL.name("retries_left"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>transfer</code> table reference
     */
    public Transfer() {
        this(DSL.name("transfer"), null);
    }

    /**
     * Create an aliased <code>transfer</code> table reference
     */
    public Transfer(String alias) {
        this(DSL.name(alias), TRANSFER);
    }

    /**
     * Create an aliased <code>transfer</code> table reference
     */
    public Transfer(Name alias) {
        this(alias, TRANSFER);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transfer(Table<O> child, ForeignKey<O, TransferRecord> key) {
        super(child, key, TRANSFER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSFER_PRIMARY);
    }

    @Override
    public UniqueKey<TransferRecord> getPrimaryKey() {
        return Keys.KEY_TRANSFER_PRIMARY;
    }

    @Override
    public List<UniqueKey<TransferRecord>> getKeys() {
        return Arrays.<UniqueKey<TransferRecord>>asList(Keys.KEY_TRANSFER_PRIMARY);
    }

    @Override
    public Transfer as(String alias) {
        return new Transfer(DSL.name(alias), this);
    }

    @Override
    public Transfer as(Name alias) {
        return new Transfer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(String name) {
        return new Transfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Name name) {
        return new Transfer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, UInteger, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
